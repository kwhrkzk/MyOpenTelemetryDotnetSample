using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace usecase.decorator;

[Generator(LanguageNames.CSharp)]
public class UsecaseDecoratorClassGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var source = context.SyntaxProvider.ForAttributeWithMetadataName(
                    "usecase.GenerateDecoratorAttribute",
                    (node, token) => true,
                    (context, token) => context);

        context.RegisterImplementationSourceOutput(source, action);
    }

    private void action(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
    {
        var typeSymbol = (INamedTypeSymbol)source.TargetSymbol;
        var typeNode = (TypeDeclarationSyntax)source.TargetNode;

        var isymbol = typeSymbol.Interfaces.First();
        var methodName = isymbol.MemberNames.First();
        MethodDeclarationSyntax method = typeNode.Members.OfType<MethodDeclarationSyntax>().First(x => x.Identifier.NormalizeWhitespace().Text == methodName);

        var code = $$"""
            // <auto-generated/>
            #nullable enable

            using System.Diagnostics;
            using Microsoft.Extensions.DependencyInjection;
            using {{isymbol.ContainingNamespace.Name}};

            namespace usecase;

            public record {{typeSymbol.Name}}Decorator(ActivitySource activitySource, [FromKeyedServices("{{typeSymbol.Name}}Base")]{{isymbol.Name}} {{typeSymbol.Name}}Base) : {{isymbol.Name}}
            {
                {{String.Join(" ", method.Modifiers.Select(x => x.Text))}} {{method.ReturnType}} {{method.Identifier}}({{method.ParameterList.Parameters}})
                {
                    Activity? activity = activitySource.StartActivity("{{typeSymbol.Name}}.{{method.Identifier}}");

                    try
                    {
                        {{typeSymbol.Name}}Base.{{method.Identifier}}({{String.Join(",", method.ParameterList.Parameters.Select(x => x.Identifier.ValueText))}});
                        activity?.SetStatus(ActivityStatusCode.Ok);
                    }
                    catch (Exception ex)
                    {
                        activity?.SetStatus(ActivityStatusCode.Error, ex.Message);
                        throw;
                    }
                    finally
                    {
                        activity?.Dispose();
                    }
                }
            }
            """;

        context.AddSource($"{typeSymbol.Name}Decorator.cs", code);
    }
}